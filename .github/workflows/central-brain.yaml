 name: Build and Deploy Central Brain
 
 on:
   push:
     branches: [ main ]
     paths:
       - 'central-brain/**'
       - '.github/workflows/central-brain.yaml'
   workflow_dispatch:
 
 env:
   AWS_REGION: us-east-1
   TF_VERSION: 1.6.0
 
 jobs:
   layer_build:
     name: Build Lambda Layer
     runs-on: ubuntu-latest
     outputs:
       layer_arn: ${{ steps.publish_layer.outputs.layer_arn }}
 
     steps:
     - name: Checkout code
       uses: actions/checkout@v4
 
     - name: Set up Python
       uses: actions/setup-python@v4
       with:
         python-version: '3.9'
 
     - name: Create Layer Package
       run: |
         mkdir -p python # Standard structure for Python layers
         pip install numpy scikit-learn -t python # Install large dependencies
         zip -r layer.zip python # Zip the python directory
 
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v4
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}
 
     - name: Publish Lambda Layer
       id: publish_layer
       run: |
         LAYER_NAME="ai-devops-platform-numpy-scikit-learn-layer"
         LAYER_DESCRIPTION="Numpy and Scikit-learn for AI DevOps Platform"
         S3_BUCKET="ai-devops-platform-lambda-code-${{ secrets.AWS_ACCOUNT_ID }}" # Reuse the same S3 bucket
         LAYER_ZIP_KEY="layers/${LAYER_NAME}-${{ github.sha }}.zip" # Unique key for the layer zip
 
         # Upload layer zip to S3 first
         aws s3 cp layer.zip s3://$S3_BUCKET/$LAYER_ZIP_KEY
 
         # Publish layer from S3
         LAYER_ARN=$(aws lambda publish-layer-version \
           --layer-name $LAYER_NAME \
           --description "$LAYER_DESCRIPTION" \
           --content S3Bucket=$S3_BUCKET,S3Key=$LAYER_ZIP_KEY \
           --compatible-runtimes python3.9 \
           --query 'LayerVersionArn' \
           --output text)
         echo "layer_arn=$LAYER_ARN" >> $GITHUB_OUTPUT
 
   build:
     name: Build Lambda Package
     runs-on: ubuntu-latest
     needs: layer_build
     outputs:
       lambda_zip_key: ${{ steps.upload_s3.outputs.zip_key }}
 
     steps:
     - name: Checkout code
       uses: actions/checkout@v4
 
     - name: Set up Python
       uses: actions/setup-python@v4
       with:
         python-version: '3.9'
 
     - name: Install zip utility
       run: sudo apt-get update && sudo apt-get install -y zip
 
     - name: Create Lambda Deployment Package
       run: |
         mkdir -p lambda_package
         pip install -r central-brain/src/requirements.txt -t lambda_package
         cp -r central-brain/src/* lambda_package/
         cd lambda_package
         zip -r ../central-brain-deployment.zip .
         cd ..
 
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v4
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}
 
     - name: Upload Lambda Package to S3
       id: upload_s3
       run: |
         S3_BUCKET="ai-devops-platform-lambda-code-${{ secrets.AWS_ACCOUNT_ID }}"
         ZIP_KEY="central-brain-${{ github.sha }}.zip"
         aws s3 cp central-brain-deployment.zip s3://$S3_BUCKET/$ZIP_KEY
         echo "zip_key=$ZIP_KEY" >> $GITHUB_OUTPUT
 
   deploy:
     name: Deploy to AWS
     runs-on: ubuntu-latest
     needs: [build, layer_build]
     defaults:
       run:
         shell: bash
         working-directory: infrastructure/terraform
     env:
       TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
       TF_VAR_telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
       TF_VAR_api_key: ${{ secrets.API_KEY }}
       TF_VAR_lambda_zip_key: ${{ needs.build.outputs.lambda_zip_key }}
       TF_VAR_lambda_layer_arn: ${{ needs.layer_build.outputs.layer_arn }}
 
     steps:
     - name: Checkout code
       uses: actions/checkout@v4
 
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v3
       with:
         terraform_version: ${{ env.TF_VERSION }}
 
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v4
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}
 
     - name: Terraform Init
       run: |
         terraform init \
           -backend-config="bucket=ai-devops-platform-tfstate-${{ secrets.AWS_ACCOUNT_ID }}" \
           -backend-config="key=terraform.tfstate" \
           -backend-config="region=${{ env.AWS_REGION }}" \
           -backend-config="encrypt=true"
 
     - name: Terraform Apply
       run: terraform apply -auto-approve -input=false